AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Polybot
  SAM Template for Polybot  

Globals:
  Function:
    Runtime: python3.7
    Environment:
      Variables:
        PYTHONPATH: "/var/task/src:/opt/python"
        PATH: "/opt/bin/chrome-linux:/opt/bin:/opt/bin/lib"
        BUCKET: !Ref Bucket
        SCREENSHOT_PATH: screenshots
        S3WEB: !Sub "http://${Bucket}.s3-website.${AWS::Region}.amazonaws.com"

Resources:
  # --------------------- STORAGE ---------------------
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOutputFiles
            Prefix: output/
            Status: Enabled
            ExpirationInDays: 1
      WebsiteConfiguration:
        IndexDocument: 'index.html'
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - POST
              - PUT
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'

  PublicBucketFolder:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Bucket
                - /public/*
            Principal: '*'

  ContestsDB: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "source"
          AttributeType: "S"
        - AttributeName: "group_id"
          AttributeType: "S"      
      KeySchema: 
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "source"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "group_contests"
          KeySchema:
            - AttributeName: "group_id"
              KeyType: "HASH"
            - AttributeName: 'id'
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      BillingMode: "PAY_PER_REQUEST"

  SpacesDB: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "app"
          AttributeType: "S"
        - AttributeName: "group_id"
          AttributeType: "S"  
      KeySchema: 
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "app"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "group_spaces"
          KeySchema:
            - AttributeName: 'group_id'
              KeyType: 'HASH'
            - AttributeName: 'id'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'ALL'
      BillingMode: 'PAY_PER_REQUEST'

  # --------------------- LAMBDAS ---------------------
  PolybotCommand:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: polybotCommand/
      Handler: app.lambda_handler
      Architectures:
      - x86_64
      Timeout: 60
      MemorySize: 2048
      Layers:
        - Ref: SrcLayer
      Tracing: Active
      Environment:
        Variables:
          CHROMIUM_SCREENSHOT_ARN: !GetAtt ChromiumScreenshot.Arn
          SPACES_DB: !Ref SpacesDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /polybotCommand
            Method: GET
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource: 
                - !Sub 'arn:aws:s3:::${Bucket}'
                - !Sub 'arn:aws:s3:::${Bucket}/*'
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
            - Effect: Allow
              Action:
              - secretsmanager:GetSecretValue
              Resource: '*'
            - Effect: Allow
              Action:
                  - dynamodb:*
              Resource: '*'

  ChromiumScreenshot:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: chromiumCommands/
      Handler: screenshot.app.lambda_handler
      Runtime: python3.7
      Architectures:
      - x86_64
      Timeout: 60
      MemorySize: 2048
      Layers:
        - Ref: ChromiumLayer
      Events:
        Api:
          Type: Api
          Properties:
            Path: /chromium/screenshot
            Method: GET
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource: 
                - !Sub 'arn:aws:s3:::${Bucket}'
                - !Sub 'arn:aws:s3:::${Bucket}/*'

  # --------------------- LAYERS ---------------------
  SrcLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      ContentUri: src_layer
    Metadata:
      BuildMethod: python3.7              # Required to have AWS SAM build this layer

  ChromiumLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      ContentUri: chromium_layer
    Metadata:
      BuildMethod: makefile              # Required to have AWS SAM build this layer

  # --------------------- RESOURCE GROUP ---------------------
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
    
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage for Polybot API
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"